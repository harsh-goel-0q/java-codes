package kunal_recursion;

import java.util.Arrays;

public class Merge_Sort {
	public static void main(String[] args)
	{
		int arr[]= {1,3,6,4,2,5};
		new Merge_Sort(arr);
	}
	
	Merge_Sort(int arr[])
	{
		System.out.println(Arrays.toString(sort(arr)));
	}
	private int[] sort(int arr[])
	{
		int s=0;
		int e=arr.length-1;
		return helper(arr,s,e);
	}
	private int[] helper(int[] arr,int s,int e)
	{
		int[] arr1,arr2;
		if(e%2==0)
		{
			arr1=new int[e/2+1];
			arr2=new int[e/2];
			for(int i=0;i<e/2;i++)
			{
				arr1[i]=arr[i];
				arr2[i]=arr[e/2+i+1];
			}
			arr1[e/2]=arr[e/2];
		}
		else
		{
			arr1=new int[e/2+1];
			arr2=new int[e/2+1];
			for(int i=0;i<=e/2;i++)
			{
				arr1[i]=arr[i];
				arr2[i]=arr[e/2+i+1];
			}
		}
		return sortt(helper(arr1,s,e/2),helper(arr2,e/2+1,e));
	}
	private int[] sortt(int[] arr1, int[] arr2)
	{
		int l1=arr1.length;
		int l2=arr2.length;
		int arr[]=new int[l1+l2-2];
		int p=0,p1=0,p2=0;
		while(p1<arr1.length&&p2<arr2.length)
		{
			if(arr1[p1]>arr2[p2])
			{
				arr[p]=arr2[p2];
				p++;
				p2++;
			}
			else
			{
				arr[p]=arr1[p1];
				p++;
				p1++;
			}
		}
		return arr;
	}
}
